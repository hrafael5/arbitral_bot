const express=require("express");const router=express.Router();const crypto=require("crypto");const{Op}=require("sequelize");const User=require("../models/user.model");const UserConfiguration=require("../models/userConfiguration.model");const{sendFreeWelcomeEmail,sendPasswordResetEmail}=require("../utils/emailService");const isAuthenticated=(req,res,next)=>{if(req.session&&req.session.userId){return next()}res.status(401).json({message:"Acesso n√£o autorizado. Por favor, fa√ßa login."})};router.post("/register",async(req,res)=>{try{const{name,email,whatsapp,password}=req.body;console.log(`üìù Tentativa de cadastro para: ${email}`);if(!name||!email||!password){return res.status(400).json({message:"Nome, email e senha s√£o obrigat√≥rios."})}const newUser=await User.create({name:name.trim(),email:email.toLowerCase().trim(),whatsapp:whatsapp?whatsapp.trim():null,password:password,subscriptionStatus:"free"});console.log(`‚úÖ Novo usu√°rio criado: ${newUser.id} - ${newUser.email}`);await UserConfiguration.create({UserId:newUser.id});try{await sendFreeWelcomeEmail(newUser.email,newUser.name);console.log(`üìß E-mail de boas-vindas (free) enviado para: ${newUser.email}`)}catch(emailError){console.error(`‚ùå Erro ao enviar e-mail para ${newUser.email}:`,emailError)}req.session.userId=newUser.id;res.status(201).json({message:"Conta criada com sucesso!"})}catch(error){console.error("Erro no cadastro:",error);if(error.name==="SequelizeValidationError"){return res.status(400).json({message:error.errors.map(e=>e.message).join(", ")})}if(error.name==="SequelizeUniqueConstraintError"){return res.status(409).json({message:"Este email j√° est√° cadastrado."})}res.status(500).json({message:"Ocorreu um erro interno ao criar sua conta."})}});router.post("/login",async(req,res)=>{try{const{email,password}=req.body;if(!email||!password){return res.status(400).json({message:"Email e senha s√£o obrigat√≥rios."})}const user=await User.findOne({where:{email:email.toLowerCase()}});if(!user){return res.status(401).json({message:"Email ou senha inv√°lidos."})}if(user.isLocked()){return res.status(429).json({message:"Conta temporariamente bloqueada. Tente novamente mais tarde."})}const isValidPassword=await user.validatePassword(password);if(!isValidPassword){await user.incrementLoginAttempts();return res.status(401).json({message:"Email ou senha inv√°lidos."})}await user.resetLoginAttempts();req.session.userId=user.id;console.log(`‚úÖ Login bem-sucedido para: ${user.email} (ID: ${user.id})`);res.json({message:"Login realizado com sucesso!"})}catch(error){console.error("Erro no login:",error);res.status(500).json({message:"Ocorreu um erro interno durante o login."})}});router.post("/logout",(req,res)=>{req.session.destroy(err=>{if(err){return res.status(500).json({message:"N√£o foi poss√≠vel fazer logout."})}res.clearCookie("connect.sid");res.json({message:"Logout realizado com sucesso!"})})});router.get("/me",isAuthenticated,async(req,res)=>{try{const user=await User.findByPk(req.session.userId,{attributes:{exclude:["password","resetToken","resetTokenExpiry","emailVerificationToken","emailVerificationExpiry"]}});if(!user){req.session.destroy();return res.status(404).json({message:"Usu√°rio n√£o encontrado."})}res.json(user)}catch(error){console.error(`Erro ao buscar dados do usu√°rio ${req.session.userId}:`,error);res.status(500).json({message:"Erro ao buscar dados do usu√°rio."})}});router.post("/forgot-password",async(req,res)=>{try{const{email}=req.body;if(!email){return res.status(400).json({message:"Email √© obrigat√≥rio."})}const user=await User.findOne({where:{email:email.toLowerCase()}});if(user){const resetToken=user.generatePasswordResetToken();await user.save();try{await sendPasswordResetEmail(user.email,resetToken);console.log(`üìß E-mail de redefini√ß√£o enviado para: ${user.email}`)}catch(emailError){console.error(`‚ùå Erro ao enviar e-mail de redefini√ß√£o para ${user.email}:`,emailError);return res.status(500).json({message:"Erro ao enviar email de redefini√ß√£o."})}}res.json({message:"Se o email estiver cadastrado, voc√™ receber√° as instru√ß√µes para redefinir sua senha."})}catch(error){console.error("Erro na solicita√ß√£o de redefini√ß√£o de senha:",error);res.status(500).json({message:"Erro interno no servidor."})}});router.get("/verify-email",async(req,res)=>{try{const{token}=req.query;if(!token){return res.status(400).json({message:"Token de verifica√ß√£o √© obrigat√≥rio."})}const hashedToken=crypto.createHash("sha256").update(token).digest("hex");const user=await User.findOne({where:{emailVerificationToken:hashedToken,emailVerificationExpiry:{[Op.gt]:new Date}}});if(!user){return res.status(400).json({message:"Token inv√°lido ou expirado."})}user.emailVerified=true;user.emailVerificationToken=null;user.emailVerificationExpiry=null;await user.save();res.json({message:"Email verificado com sucesso!"})}catch(error){console.error("Erro na verifica√ß√£o de email:",error);res.status(500).json({message:"Erro interno no servidor."})}});router.put("/profile",isAuthenticated,async(req,res)=>{try{const{name,whatsapp}=req.body;const user=await User.findByPk(req.session.userId);if(name)user.name=name.trim();if(whatsapp!==undefined)user.whatsapp=whatsapp?whatsapp.trim():null;await user.save();res.json({message:"Perfil atualizado com sucesso!"})}catch(error){console.error("Erro ao atualizar perfil:",error);res.status(500).json({message:"Erro interno no servidor."})}});router.put("/change-password",isAuthenticated,async(req,res)=>{try{const{currentPassword,newPassword}=req.body;if(!currentPassword||!newPassword){return res.status(400).json({message:"Senha atual e nova senha s√£o obrigat√≥rias."})}const user=await User.findByPk(req.session.userId);const isValidPassword=await user.validatePassword(currentPassword);if(!isValidPassword){return res.status(400).json({message:"Senha atual incorreta."})}user.password=newPassword;await user.save();res.json({message:"Senha alterada com sucesso!"})}catch(error){console.error("Erro ao alterar senha:",error);if(error.name==="SequelizeValidationError"){return res.status(400).json({message:error.errors.map(e=>e.message).join(", ")})}res.status(500).json({message:"Erro interno no servidor."})}});router.delete("/account",isAuthenticated,async(req,res)=>{try{const{password}=req.body;if(!password){return res.status(400).json({message:"Senha √© obrigat√≥ria para deletar a conta."})}const user=await User.findByPk(req.session.userId);const isValidPassword=await user.validatePassword(password);if(!isValidPassword){return res.status(400).json({message:"Senha incorreta."})}await UserConfiguration.destroy({where:{UserId:user.id}});await user.destroy();req.session.destroy();res.json({message:"Conta deletada com sucesso."})}catch(error){console.error("Erro ao deletar conta:",error);res.status(500).json({message:"Erro interno no servidor."})}});router.get("/settings",isAuthenticated,async(req,res)=>{try{const userConfig=await UserConfiguration.findOne({where:{UserId:req.session.userId}});if(!userConfig){return res.status(404).json({message:"Configura√ß√µes n√£o encontradas."})}res.json(userConfig)}catch(error){console.error(`Erro ao buscar config do usu√°rio ${req.session.userId}:`,error);res.status(500).json({message:"Erro ao buscar configura√ß√µes."})}});router.post("/settings",isAuthenticated,async(req,res)=>{try{const[userConfig]=await UserConfiguration.findOrCreate({where:{UserId:req.session.userId}});await userConfig.update(req.body);res.json({message:"Configura√ß√µes salvas com sucesso!",config:userConfig})}catch(error){console.error(`Erro ao salvar config do usu√°rio ${req.session.userId}:`,error);res.status(500).json({message:"Erro ao salvar configura√ß√µes."})}});module.exports=router;